/*
 * GPLv3
 */
package ximagejwalker;

import ij.IJ;
import ij.ImageJ;
import ij.io.DirectoryChooser;
import ij.io.OpenDialog;
import java.beans.PropertyChangeEvent;

/**
 *
 * @author Xiao Zhou
 */
public class XImageJWalkerGUI extends javax.swing.JFrame {

    XImageJWalkerPickupWindow pickupWindow;

    /**
     * Creates new form XLineScanGUI
     */
    public XImageJWalkerGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        openFolderBn = new javax.swing.JButton();
        openFolderTf = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        fileNameRegexCb = new javax.swing.JComboBox();
        runBn = new javax.swing.JButton();
        ignorelROICb = new javax.swing.JCheckBox();
        bsFileBn = new javax.swing.JButton();
        beanShellFileTf = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("XImageJ_Walker");

        openFolderBn.setText("Open a Folder");
        openFolderBn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFolderBnActionPerformed(evt);
            }
        });

        openFolderTf.setEditable(false);

        jLabel4.setText("Image file name follow the regex:");

        fileNameRegexCb.setEditable(true);
        fileNameRegexCb.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "^.+\\.[Zz][Ii][Pp]\\z", "^.+\\.[Tt][Ii][Ff]\\z", "^.*DAPI.*\\.[Tt][Ii][Ff]\\z", "^.*FITC.*\\.[Tt][Ii][Ff]\\z", "^.*Red.*\\.[Tt][Ii][Ff]\\z", "^.*TRITC.*\\.[Tt][Ii][Ff]\\z" }));

        runBn.setText("Run");
        runBn.setEnabled(false);
        runBn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runBnActionPerformed(evt);
            }
        });

        ignorelROICb.setSelected(true);
        ignorelROICb.setText("Ignore any saved ROIs in image files and mannually choose ROIs for each image by poping up each image");

        bsFileBn.setText("Choose a BeanShell file");
        bsFileBn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bsFileBnActionPerformed(evt);
            }
        });

        beanShellFileTf.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bsFileBn, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(beanShellFileTf))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(runBn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(openFolderBn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 345, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(fileNameRegexCb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(openFolderTf)))
                            .addComponent(ignorelROICb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openFolderBn)
                    .addComponent(openFolderTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(fileNameRegexCb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bsFileBn)
                    .addComponent(beanShellFileTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(ignorelROICb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(runBn)
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFolderBnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFolderBnActionPerformed
        DirectoryChooser dc = new DirectoryChooser("Choose a Image Folder");
        String dir = dc.getDirectory();
        if (dir != null) {
            openFolderTf.setText(dir);
        }
        runBn.setEnabled(openFolderTf.getText().length() != 0&&beanShellFileTf.getText().length()!=0);
    }//GEN-LAST:event_openFolderBnActionPerformed

    private void runBnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runBnActionPerformed
        XImageJWalkingThread worker = new XImageJWalkingThread();
        if ("Run".equals(runBn.getText())) {
            runBn.setText("Cancel");
            worker.setOpenFolder(openFolderTf.getText());
            worker.setFileNameRegex(fileNameRegexCb.getSelectedItem().toString());
            worker.setBsFileName(beanShellFileTf.getText());
            worker.setIgnoreRois(ignorelROICb.isSelected());

            worker.addPropertyChangeListener((PropertyChangeEvent evt1) -> {
                if (worker.isCancelled()) {
                    IJ.log("INFO: XImageJ_Walker canncelled");
                    runBn.setText("Run");
                } else if (worker.isDone()) {
                    IJ.log("INFO: XImageJ_Walker finished");
                    runBn.setText("Run");
                } else if (evt1.getPropertyName().equals("PausedAt")) {
                    String pausedAt = (String) evt1.getNewValue();
                    pickupWindow = new XImageJWalkerPickupWindow(pausedAt, worker);
                    pickupWindow.setVisible(true);

                }
            });

            worker.execute();

        } else {
            if (pickupWindow != null) {
                pickupWindow.canel();
                pickupWindow=null;
            }
            worker.cancel(true);

        }
    }//GEN-LAST:event_runBnActionPerformed

    private void bsFileBnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bsFileBnActionPerformed
        OpenDialog od = new OpenDialog("Choose a BeanShell File");
        if (od.getPath() != null) {
            beanShellFileTf.setText(od.getPath());
        }
        runBn.setEnabled(openFolderTf.getText().length() != 0&&beanShellFileTf.getText().length()!=0);        // TODO add your handling code here:
    }//GEN-LAST:event_bsFileBnActionPerformed
    public static void main(String args[]) {


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new XImageJWalkerGUI().setVisible(true);
            ImageJ imj = new ImageJ(ImageJ.EMBEDDED);
            imj.exitWhenQuitting(true);
            imj.setVisible(true);
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField beanShellFileTf;
    private javax.swing.JButton bsFileBn;
    private javax.swing.JComboBox fileNameRegexCb;
    private javax.swing.JCheckBox ignorelROICb;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JButton openFolderBn;
    private javax.swing.JTextField openFolderTf;
    private javax.swing.JButton runBn;
    // End of variables declaration//GEN-END:variables

}
